# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:
let
  inherit (import ./variables.nix) username secondDriveMnt;
in
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # nixpkgs.config.allowUnfreePredicate =
  #   pkg:
  #   builtins.elem (lib.getName pkg) [
  #     "nvidia-x11"
  #   ];

  nixpkgs.config.allowUnfreePredicate =
    pkg:
    builtins.elem (lib.getName pkg) [
      "nvidia-x11"
    ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "usb_storage"
    "usbhid"
    "sd_mod"
    "amdgpu"
    "vfio-pci"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  boot.kernelParams = [
    "amd_iommu=on"
    # "pcie_aspm=off"
  ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0420340b-01d5-44cc-8a18-b99fcdc25dd6";
    fsType = "ext4";
  };

  # secondary nvme
  fileSystems."${secondDriveMnt}" = {
    device = "/dev/disk/by-uuid/ed53f75d-9126-4043-be57-6cda628e8dfe";
    # device = "/dev/nvme1n1p1";
    fsType = "ext4";
    options = [
      "nofail"
      "users"
    ];
  };

  systemd.tmpfiles.rules = [
    # "d /mnt/nvme1 0755 root root"
    "d /mnt/nvme1 0755 ${username} users"
  ];

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/9F31-F630";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
    ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/fd7fa047-a4ae-4489-986a-798ff85ff85f"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # specialisation."VFIO".configuration = {
  #   system.nixos.tags = [ "with-vfio" ];
  #   vfio.enable = false;
  # };
  #
  services.xserver.videoDrivers = [
    "nvidia"
    # "amdgpu"

    "displaylink"
    "modesetting"
  ];

  # services.xserver = {
  #   enable = true;
  #   videoDrivers =
  #     [
  #     "displaylink"
  #     "modesetting"
  #     ];
  #   # desktopManager = {
  #   #   plasma5.enable = true;
  #   # };
  #   # layout = "us";
  #   # xkbVariant = "";
  #   # dpi = 96;
  #   # displayManager.sessionCommands = ''
  #   #   ${lib.getBin pkgs.xorg.xrandr}/bin/xrandr --setprovideroutputsource 1 0
  #   # '';
  # };

  hardware = {
    # enableAllFirmware = true;
    # cpu.amd.updateMicrocode = true; # needs unfree
    # opengl.enable = true;
    graphics.enable = true;
    graphics.enable32Bit = true;

    nvidia = {
      prime = {
        # enable = true;
        sync.enable = true;
        nvidiaBusId = "PCI:1:0:0";
        amdgpuBusId = "PCI:6:0:0";
        # intelBusId = "PCI:0:2:0";

      };
      modesetting.enable = true;
      powerManagement.enable = true;
      powerManagement.finegrained = false;
      nvidiaSettings = true;
      open = true;
      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };
  };

  # hardware.nvidia.prime = {
  #   sync.enable = true;
  #   nvidiaBusId = "PCI:1:0:0";
  #   amdgpuBusId = "PCI:6:0:0";
  #   # intelBusId = "PCI:0:2:0";
  # };
  # hardware.nvidia.modesetting.enable = true;
  # hardware.nvidia = with config.boot.kernelPackages.nvidiaPackages; {
  #   package = stable;
  # };

}
